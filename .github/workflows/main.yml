name: CI Build

on:
  push:
    branches:
      - main
    pull_request:

env:
  IMAGE: ghcr.io/${{ github.repository_owner }}/realworld

jobs:
  build:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      packages: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install Dependencies
        run: |-
          npm install \
            semantic-release \
            @semantic-release/exec \
            @semantic-release/changelog \
            @semantic-release/git

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Get Version
        id: version
        run: |
          cp .releaserc-dump-version.yaml .releaserc.yaml
          npx semantic-release --dry-run --no-ci
          if [ -e .VERSION ]; then
            echo "::set-output name=version::$(cat .VERSION)"
          else
            echo "::set-output name=version::skip"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Container Image
        if: steps.version.outputs.version != 'skip'
        run: docker build -t $IMAGE:${{ steps.version.outputs.version }} .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Scan image
        if: steps.version.outputs.version != 'skip'
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.IMAGE }}:${{ steps.version.outputs.version }}

      - name: Release
        if: steps.version.outputs.version != 'skip'
        run: |
          cp .releaserc-full-release.yaml .releaserc.yaml
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: terraform checks
        run: |-
          set -euo pipefail

          cd infrastructure/terraform

          find . -type d -maxdepth 1 -mindepth 1 | sort | while read -r dir; do
            echo "$dir"
            cd "$dir"

            terraform init -backend=false
            terraform validate -no-color
            terraform fmt -check

            cd - > /dev/null

            echo
          done

  go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/setup-go@v3
        with:
          go-version: '1.18.7'

      - name: Install buffalo
        run: |-
          wget https://github.com/gobuffalo/cli/releases/download/v0.18.8/buffalo_0.18.8_Linux_x86_64.tar.gz
          tar -xvzf buffalo_0.18.8_Linux_x86_64.tar.gz
          sudo mv buffalo /usr/local/bin/buffalo

      - name: Start postgresql
        run: |-
          sudo systemctl start postgresql.service
          pg_isready
          sudo -u postgres psql --command="ALTER USER postgres WITH PASSWORD 'postgres';" --command="\du"

      - name: Run Tests
        run: |-
          buffalo test

      #- name: golangci-lint
        #uses: golangci/golangci-lint-action@v3
